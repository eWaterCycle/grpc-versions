name: Generate gRPC version

on:
  workflow_dispatch:
    inputs:
      VERSION:
        description: 'gRPC version to build and upload (eg. 1.35.0)'
        required: true

env:
  VERSION: ${{ github.event.inputs.VERSION }}

jobs:
  build:
    name: Build gRPC ${{ github.event.inputs.VERSION }} [${{ matrix.os }}]
    runs-on: ${{ matrix.os }}
    env:
      ARTIFACT_NAME: grpc-${{ github.event.inputs.VERSION }}-${{ matrix.os }}-x64
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: grpc/grpc
          ref: v${{ env.VERSION }}
          submodules: true
      - name: Build
        run: |
          mkdir -p ${{ runner.tool_cache }}/grpc/${{ env.VERSION }}/x64
          mkdir -p cmake/build
          cd cmake/build
          cmake -DgRPC_INSTALL=ON -DgRPC_SSL_PROVIDER=package \
            -DgRPC_BUILD_TESTS=OFF -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_INSTALL_PREFIX=${{ runner.tool_cache }}/grpc/${{ env.VERSION }}/x64 ../..
          make -j 2
          make install
      - name: Echo version
        run: |
          echo ${{ github.ref }}
          ${{ runner.tool_cache }}/grpc/${{ env.VERSION }}/x64/bin/protoc --version
      - name: Make tarball
        run: |
          mkdir ${{ runner.temp }}/artifact
          tar -C ${{ runner.tool_cache }}/grpc/${{ env.VERSION }}/x64 -zcf ${{ runner.temp }}/artifact/${{ env.ARTIFACT_NAME }}.tar.gz .
      - name: Publish artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ runner.temp }}/artifact
  publish_release:
    name: Publish build tarballs in a release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/download-artifact@v2
    - name: Publish Release ${{ env.VERSION }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}-${{ github.run_id }}
        release_name: ${{ env.VERSION }}
        body: |
          gRPC v${{ env.VERSION }} for use in GH Actions
    - name: Upload release assets
      uses: actions/github-script@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          for (let artifactDir of fs.readdirSync('.')) {
            let artifactName = fs.readdirSync(`${artifactDir}`)[0];
            console.log(`Upload ${artifactName} asset`);
            github.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.id }},
              name: artifactName,
              data: fs.readFileSync(`./${artifactDir}/${artifactName}`)
            });
          }

  # TODO manually trigger create-pr wf first
  # trigger_pr:
  #   name: Trigger "Create Pull Request" workflow
  #   needs: publish_release
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Trigger "Create Pull Request" workflow
  #     uses: actions/github-script@v3
  #     with:
  #       # dispatch requires more scope/permision then secrets.GITHUB_TOKEN
  #       # See https://docs.github.com/en/rest/reference/actions#create-a-workflow-dispatch-event
  #       github-token: ${{ secrets.PERSONAL_TOKEN }}
  #       script: |
  #         github.actions.createWorkflowDispatch({
  #           owner: context.repo.owner,
  #           repo: context.repo.repo,
  #           workflow_id: 'create-pr.yml',
  #           ref: 'main'
  #         });
